name: Deploy to Amazon ECS with ECR Public

on:
  push:
    branches: [ "master", "main" ]

env:
  AWS_REGION: eu-central-1                    # set this to your preferred AWS region, e.g. us-west-1
  ECR_PUBLIC_REPOSITORY: fundagold_public_repository # set this to your Amazon ECR Public repository name
  ECS_SERVICE: FundaGold-Service-Public       # set this to your Amazon ECS service name
  ECS_CLUSTER: FundaGold_Cluster              # set this to your Amazon ECS cluster name
  ECS_TASK_DEFINITION: ./FundaGold-TaskDefinition-Public.json # path to your ECS task definition
  CONTAINER_NAME: FundaGold-Container-Public # the name of the container in your task definition

permissions:
  contents: read

jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    environment: production

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      # Default AWS credentials configuration for eu-central-1 region
      - name: Configure AWS credentials for eu-central-1
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      # Login to Amazon ECR Public (does not require region specification)
      - name: Login to Amazon ECR Public
        id: login-ecr-public
        uses: aws-actions/amazon-ecr-login@v2
        with:
          registry-type: public
        env:
          AWS_REGION: 'us-east-1'           # Unsetting AWS_REGION for this step
          AWS_DEFAULT_REGION: 'us-east-1'   # Unsetting AWS_DEFAULT_REGION for this step

      # Build, tag, and push docker image to Amazon ECR Public
      - name: Build, tag, and push docker image to Amazon ECR Public
        id: build-and-push
        run: |
          IMAGE_TAG=${GITHUB_SHA::8}
          IMAGE_URI=public.ecr.aws/r6m3r1y7/fundagold_repository:${IMAGE_TAG}
  
          docker build --build-arg BOT_TOKEN=${{ secrets.BOT_TOKEN }} -t ${IMAGE_URI} .
          docker push ${IMAGE_URI}
          echo "::set-output name=image_uri::${IMAGE_URI}"
        env:
          BOT_TOKEN: ${{ secrets.BOT_TOKEN }}

      # Fill in the new image ID in the Amazon ECS task definition
      - name: Fill in the new image ID in the Amazon ECS task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: ${{ env.ECS_TASK_DEFINITION }}
          container-name: ${{ env.CONTAINER_NAME }}
          image: ${{ steps.build-and-push.outputs.image_uri }}

      # Deploy Amazon ECS task definition
      - name: Deploy Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: ${{ env.ECS_SERVICE }}
          cluster: ${{ env.ECS_CLUSTER }}
          wait-for-service-stability: true